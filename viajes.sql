/*************************************************/
/* SCRIPT VIAJES */
/*************************************************/
SET AUTOCOMMIT on;
/**********************************************************/
/* 1.- Sentencias de borrado de todas las tablas y vistas */
/**********************************************************/
DROP INDEX SALAR_FIJO;
DROP INDEX SALAR_TEMP;

DROP TABLE PERSONA CASCADE CONSTRAINTS;
DROP TABLE EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE EMP_FIJO CASCADE CONSTRAINTS;
DROP TABLE EMP_TEMPORAL CASCADE CONSTRAINTS;
DROP TABLE CLIENTE_VIP CASCADE CONSTRAINTS;
DROP TABLE AGENCIA CASCADE CONSTRAINTS;
DROP TABLE ALOJAMIENTOS CASCADE CONSTRAINTS;
DROP TABLE TRANSPORTE CASCADE CONSTRAINTS;
DROP TABLE PAQUETE CASCADE CONSTRAINTS;
DROP TABLE PAGO CASCADE CONSTRAINTS;
DROP TABLE OBJETO_RESERVABLE CASCADE CONSTRAINTS;
DROP TABLE PAGO_FRACCIONADO CASCADE CONSTRAINTS;
DROP TABLE VENDE_ALOJ CASCADE CONSTRAINTS;
DROP TABLE OFERTA CASCADE CONSTRAINTS;
DROP TABLE VENDE_TRAN CASCADE CONSTRAINTS;

DROP VIEW CLIENTE_COMP; 
DROP VIEW EMPLEADOS_AGE;

DROP FUNCTION ganancias_transporte;
DROP FUNCTION ganancias_paquete;
DROP FUNCTION ganancias_alojamientos;
DROP PROCEDURE aumentarSalarioEmpFijo;
DROP PROCEDURE ListaEmpleados;
DROP PROCEDURE ListaClientes;
DROP PROCEDURE ListaClientesVIP;
DROP FUNCTION validar_DNI;

DROP TRIGGER check_dni;
DROP TRIGGER check_numero;
DROP TRIGGER check_supervisor;
DROP TRIGGER check_empleado_fijo;
DROP TRIGGER check_empleado_temporal;

/**************************************************/
/* 2.- Creamos las tablas de nuestro Diagrama EER */
/**************************************************/

CREATE TABLE AGENCIA (
    ID_AGE          NUMBER(4) NOT NULL,
    NOMBRE_AGE      VARCHAR2(30) NOT NULL,
    CALLE_AG       VARCHAR2(40) NOT NULL,
    NUMERO_AG      NUMBER(6) NOT NULL,
    CP_AG          NUMBER(6) NOT NULL,
    CIUDAD_AG      VARCHAR2(12) NOT NULL,
    PROVINCIA_AG   VARCHAR2(12) NOT NULL,
    TELEFONO_AGE    NUMBER(9) NOT NULL CHECK(TELEFONO_AGE>0),
    
    CONSTRAINT REST1 PRIMARY KEY(ID_AGE)
);

CREATE TABLE PERSONA (
    NOMBRE_PER      VARCHAR2(50) NOT NULL,
    CALLE       VARCHAR2(40) NOT NULL,
    NUMERO      NUMBER(6) NOT NULL CHECK(NUMERO>=0 AND NUMERO<=100),
    CP          NUMBER(6) NOT NULL,
    CIUDAD      VARCHAR2(12) NOT NULL,
    PROVINCIA   VARCHAR2(12) NOT NULL,
    EMAIL_PER       VARCHAR (30) NOT NULL,
    TELEFONO_PER    NUMBER(9) NOT NULL CHECK(TELEFONO_PER>0),
    ID_PERSONA      VARCHAR2(9),
    
    CONSTRAINT REST2 PRIMARY KEY (ID_PERSONA),
    CONSTRAINT REST100 CHECK (REGEXP_LIKE(ID_PERSONA, '^[0-9]{8}[A-Z]$')),
    CONSTRAINT REST3 UNIQUE (EMAIL_PER)   
);

CREATE TABLE CLIENTE (
    ID_CLIENTE  VARCHAR2(4) NOT NULL,
    ID_PERSONA  VARCHAR2(9) NOT NULL,

    CONSTRAINT REST4 PRIMARY KEY (ID_PERSONA),
    CONSTRAINT REST5 UNIQUE (ID_CLIENTE),
    CONSTRAINT REST6 FOREIGN KEY (ID_PERSONA) REFERENCES PERSONA

);

CREATE TABLE EMPLEADO (
    ID_EMP          VARCHAR2(4) NOT NULL,
    ID_EMPLEADO_SUP VARCHAR2(9) NULL,
    ID_AGE          NUMBER(4) NOT NULL ,
    ID_PERSONA	    VARCHAR2(9) NOT NULL,
    
    CONSTRAINT REST7 PRIMARY KEY (ID_PERSONA),
    CONSTRAINT REST8 FOREIGN KEY (ID_PERSONA) REFERENCES PERSONA,
    CONSTRAINT REST9 FOREIGN KEY(ID_EMPLEADO_SUP)REFERENCES EMPLEADO,
    CONSTRAINT REST10 FOREIGN KEY (ID_AGE) REFERENCES AGENCIA,
    CONSTRAINT REST11 UNIQUE (ID_EMP)
);


CREATE TABLE EMP_FIJO (
    ID_FIJO NUMBER(4) NOT NULL,
    SALARIO_FIJO NUMBER(6,2) NOT NULL,
    ID_PERSONA VARCHAR2(9) NOT NULL,
    
    CONSTRAINT REST12 PRIMARY KEY(ID_PERSONA),
    CONSTRAINT REST13 FOREIGN KEY (ID_PERSONA) REFERENCES EMPLEADO,
    CONSTRAINT REST14 UNIQUE (ID_FIJO)
);

CREATE TABLE EMP_TEMPORAL (
    ID_TEMPORAL NUMBER(4) NOT NULL,
    SALARIO_TEMPORAL NUMBER(6,2) NOT NULL,
    ID_PERSONA VARCHAR2(9) NOT NULL,
    
    CONSTRAINT REST15 PRIMARY KEY(ID_PERSONA),
    CONSTRAINT REST16 FOREIGN KEY (ID_PERSONA) REFERENCES EMPLEADO,
    CONSTRAINT REST17 UNIQUE (ID_TEMPORAL)
);

CREATE TABLE CLIENTE_VIP (
    DESCUENTO NUMBER(6,2) NOT NULL,
    ID_PERSONA VARCHAR2(9) NOT NULL,
    ID_CLIENTE_VIP VARCHAR2(4)NOT NULL,
    
    CONSTRAINT REST18 PRIMARY KEY(ID_PERSONA),
    CONSTRAINT REST19 FOREIGN KEY (ID_PERSONA) REFERENCES EMPLEADO,
    CONSTRAINT REST20 FOREIGN KEY (ID_PERSONA) REFERENCES CLIENTE,
    CONSTRAINT REST21 UNIQUE (ID_CLIENTE_VIP)
);

CREATE TABLE OBJETO_RESERVABLE (
    ID_RESERVA NUMBER(4) NOT NULL,
    
    
    CONSTRAINT REST30 PRIMARY KEY(ID_RESERVA)
);

CREATE TABLE ALOJAMIENTOS(
    ID_ALOJ   NUMBER(4) NOT NULL,
    ID_RESERVA NUMBER(4) NOT NULL,
    PRECIO_ALOJ  NUMBER(6,2) NOT NULL,
    FECHA_SALIDA_ALOJ DATE NOT NULL,
    FECHA_ENTRADA_ALOJ DATE NOT NULL,
    CALLE_AL       VARCHAR2(40) NOT NULL,
    NUMERO_AL      NUMBER(6) NOT NULL,
    CP_AL          NUMBER(6) NOT NULL,
    CIUDAD_AL      VARCHAR2(12) NOT NULL,
    PROVINCIA_AL   VARCHAR2(12) NOT NULL,
    NUM_HAB_ALOJ NUMBER(4) NOT NULL,
    DISPONIBILIDAD VARCHAR(20) NOT NULL,
    TIPO_ALOJ VARCHAR2(20) NOT NULL,
    
    CONSTRAINT REST22 PRIMARY KEY(ID_ALOJ),
    CONSTRAINT REST23 FOREIGN KEY(ID_RESERVA) REFERENCES OBJETO_RESERVABLE
);

CREATE TABLE TRANSPORTE (
    ID_TRAN NUMBER(4) NOT NULL,
    ID_RESERVA NUMBER(4) NOT NULL,
    PRECIO_TRAN NUMBER(6,2) NOT NULL,
    HORAS_TRAN NUMBER(4) NOT NULL,
    FECHA_SALIDA_TRAN DATE NOT NULL,
    FECHA_ENTRADA_TRAN DATE NOT NULL,
    DESTINO_TRAN VARCHAR2(20) NOT NULL,
    ORIGEN_TRAN VARCHAR2(20) NOT NULL,
    NUM_PLAZAS_TRAN NUMBER(4) NOT NULL,
    TIPO_TRAN VARCHAR2(15) NOT NULL,
    
    CONSTRAINT REST24 PRIMARY KEY(ID_TRAN),
    CONSTRAINT REST25 FOREIGN KEY(ID_RESERVA) REFERENCES OBJETO_RESERVABLE
);

CREATE TABLE PAQUETE(
    ID_PAQ NUMBER(4) NOT NULL,
    ID_RESERVA NUMBER(4) NOT NULL,
    PRECIO_PAQ NUMBER(6,2) NOT NULL,
    ID_ALOJ NUMBER(4) NOT NULL,
    ID_TRAN NUMBER(4) NOT NULL,
    
    CONSTRAINT REST26 PRIMARY KEY(ID_PAQ),
    CONSTRAINT REST27 FOREIGN KEY (ID_ALOJ) REFERENCES ALOJAMIENTOS,
    CONSTRAINT REST28 FOREIGN KEY (ID_TRAN) REFERENCES TRANSPORTE,
    CONSTRAINT REST29 FOREIGN KEY(ID_RESERVA) REFERENCES OBJETO_RESERVABLE
);

CREATE TABLE PAGO (
    ID_PAGO NUMBER(4) NOT NULL,
    ID_PERSONA VARCHAR2(9) NOT NULL,
    ID_RESERVA NUMBER(4) NOT NULL,
    FECHA_CONTRATO  DATE NOT NULL,
    ID_AGE NUMBER(4) NOT NULL,

    
    CONSTRAINT REST31 PRIMARY KEY (ID_PAGO),
    CONSTRAINT REST32 UNIQUE(ID_PERSONA),
    CONSTRAINT REST33 UNIQUE(ID_RESERVA),
    CONSTRAINT REST34 UNIQUE(FECHA_CONTRATO),
    CONSTRAINT REST35 FOREIGN KEY (ID_PERSONA) REFERENCES CLIENTE,
    CONSTRAINT REST36 FOREIGN KEY (ID_RESERVA) REFERENCES OBJETO_RESERVABLE,
    CONSTRAINT REST37 FOREIGN KEY (ID_AGE) REFERENCES AGENCIA
);

CREATE TABLE PAGO_FRACCIONADO (
    ID_PAGO         NUMBER(4) NOT NULL,
    FECHA_PAGO      DATE NULL,
    
    CONSTRAINT REST38 PRIMARY KEY (ID_PAGO, FECHA_PAGO),
    CONSTRAINT REST39 FOREIGN KEY (ID_PAGO) REFERENCES PAGO
);

CREATE TABLE OFERTA (
    ID_PERSONA VARCHAR2(9) NOT NULL,
    ID_PAQ NUMBER(4) NULL,

    CONSTRAINT REST40 PRIMARY KEY (ID_PERSONA, ID_PAQ),
    CONSTRAINT REST41 FOREIGN KEY (ID_PERSONA) REFERENCES EMPLEADO,
    CONSTRAINT REST42 FOREIGN KEY (ID_PAQ) REFERENCES PAQUETE
);

CREATE TABLE VENDE_ALOJ (
    ID_ALOJ NUMBER(4) NOT NULL,
    ID_PAQ  NUMBER(4) NULL,

    CONSTRAINT REST43 PRIMARY KEY (ID_ALOJ, ID_PAQ),
    CONSTRAINT REST44 FOREIGN KEY (ID_ALOJ) REFERENCES ALOJAMIENTOS,
    CONSTRAINT REST45 FOREIGN KEY (ID_PAQ) REFERENCES PAQUETE
);

CREATE TABLE VENDE_TRAN (
    ID_TRAN NUMBER(4) NOT NULL,
    ID_PAQ  NUMBER(4) NULL,

    CONSTRAINT REST46 PRIMARY KEY (ID_TRAN, ID_PAQ),
    CONSTRAINT REST47 FOREIGN KEY (ID_TRAN) REFERENCES TRANSPORTE,
    CONSTRAINT REST48 FOREIGN KEY (ID_PAQ) REFERENCES PAQUETE
);

/*******************************************************/
/* 3.- Creamos los í­ndices necesarios sobre las tablas */
/*******************************************************/


CREATE INDEX SALAR_FIJO ON EMP_FIJO (SALARIO_FIJO);

CREATE INDEX SALAR_TEMP ON EMP_TEMPORAL (SALARIO_TEMPORAL);


/************************************************/
/* 4.- Creamos las vistas para nuestra temática */
/************************************************/

--Vista actualizable
CREATE OR REPLACE VIEW CLIENTE_COMP(NOMBRE,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL,TELEFONO,ID_PERSONA, ID_CLIENTE)
	AS SELECT P.NOMBRE_PER,P.CALLE,P.NUMERO,P.CP,P.CIUDAD,P.PROVINCIA,P.EMAIL_PER,P.TELEFONO_PER,P.ID_PERSONA,CLIENTE.ID_CLIENTE
	FROM PERSONA P,CLIENTE 
    WHERE P.ID_PERSONA=CLIENTE.ID_PERSONA;

--Vista no actualizable
CREATE OR REPLACE VIEW EMPLEADOS_AGE (ID_AGENCIA,N_EMPLEADOS)
	AS SELECT ID_AGE,COUNT(*) AS N_EMPLEADOS
	FROM EMPLEADO
	GROUP BY ID_AGE;


/*********************************************************/
/* 5.- Insertamos datos de ejemplo para todas las tablas */
/*********************************************************/

-- TABLA PERSONA

INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('MIGUEL', 'MARTINEZ GARRIDO',98,36205,'BARCELONA','BARCELONA','MIGUEL@GMAIL.COM',674897210,'53918272M');
INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('JUAN', 'CALLE GREGORIO ESPINO',98,36205,'VIGO','PONTEVEDRA','JUAN@GMAIL.COM',644897210,'18911263L');
INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('PEDRO', 'AVENIDA BARCELONA',98,36205,'BARCELONA','BARCELONA','PEDRO@GMAIL.COM',674197210,'77254418P');
INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('MARIA', 'AVENIDA INVENTDA',98,36205,'BARCELONA','BARCELONA','MARIA@GMAIL.COM',674197210,'14712522K');

-- TABLA CLIENTE
INSERT INTO CLIENTE(ID_CLIENTE,ID_PERSONA)VALUES(5,'53918272M');
INSERT INTO CLIENTE(ID_CLIENTE,ID_PERSONA)VALUES(7,'77254418P');
INSERT INTO CLIENTE(ID_CLIENTE,ID_PERSONA)VALUES(2,'18911263L');

--TABLA AGENCIA

INSERT INTO AGENCIA(NOMBRE_AGE,CALLE_AG,NUMERO_AG,CP_AG,CIUDAD_AG,PROVINCIA_AG,TELEFONO_AGE, ID_AGE)VALUES('RYANAIR', 'CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',674894110,210);
INSERT INTO AGENCIA(NOMBRE_AGE,CALLE_AG,NUMERO_AG,CP_AG,CIUDAD_AG,PROVINCIA_AG,TELEFONO_AGE, ID_AGE)VALUES('VUELING', 'CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',374894230,211);
INSERT INTO AGENCIA(NOMBRE_AGE,CALLE_AG,NUMERO_AG,CP_AG,CIUDAD_AG,PROVINCIA_AG,TELEFONO_AGE, ID_AGE)VALUES('VIABLY', 'CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',674895230,212);

--TABLA EMPLEADO

INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('53918272M',12,'',212);
INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('77254418P',15,'',211);
INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('18911263L',17,'53918272M',210);
INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('14712522K',14,'',212);

--TABLA EMP_FIJO

INSERT INTO EMP_FIJO(ID_FIJO,SALARIO_FIJO,ID_PERSONA)VALUES(12,2100,'53918272M');
INSERT INTO EMP_FIJO(ID_FIJO,SALARIO_FIJO,ID_PERSONA)VALUES(13,2500,'77254418P');


--TABLA EMP_TEMPORAL

INSERT INTO EMP_TEMPORAL(ID_TEMPORAL,SALARIO_TEMPORAL,ID_PERSONA)VALUES(14,1700,'18911263L');
INSERT INTO EMP_TEMPORAL(ID_TEMPORAL,SALARIO_TEMPORAL,ID_PERSONA)VALUES(15,1900,'14712522K');

--TABLA OBJETO_RESERVABLE

INSERT INTO OBJETO_RESERVABLE(ID_RESERVA)VALUES(220);
INSERT INTO OBJETO_RESERVABLE(ID_RESERVA)VALUES(221);
INSERT INTO OBJETO_RESERVABLE(ID_RESERVA)VALUES(222);

--TABLA TRANSPORTE

INSERT INTO TRANSPORTE( ID_TRAN,ID_RESERVA,PRECIO_TRAN,HORAS_TRAN,FECHA_SALIDA_TRAN,FECHA_ENTRADA_TRAN,DESTINO_TRAN,ORIGEN_TRAN,NUM_PLAZAS_TRAN,TIPO_TRAN)VALUES(20,220,200,5,'26-09-2022','28-09-2022','BARCELONA','MADRID',120,'AVION');
INSERT INTO TRANSPORTE( ID_TRAN,ID_RESERVA,PRECIO_TRAN,HORAS_TRAN,FECHA_SALIDA_TRAN,FECHA_ENTRADA_TRAN,DESTINO_TRAN,ORIGEN_TRAN,NUM_PLAZAS_TRAN,TIPO_TRAN)VALUES(21,221,300,5,'26-09-2022','28-09-2022','BADAJOZ','ALMERIA',120,'AVION');
INSERT INTO TRANSPORTE( ID_TRAN,ID_RESERVA,PRECIO_TRAN,HORAS_TRAN,FECHA_SALIDA_TRAN,FECHA_ENTRADA_TRAN,DESTINO_TRAN,ORIGEN_TRAN,NUM_PLAZAS_TRAN,TIPO_TRAN)VALUES(22,222,120,7,'27-09-2022','30-09-2022','VIGO','MADRID',50,'AUTOBUS');

--TABLA ALOJAMIENTOS

INSERT INTO ALOJAMIENTOS(ID_ALOJ,ID_RESERVA,PRECIO_ALOJ,FECHA_SALIDA_ALOJ,FECHA_ENTRADA_ALOJ,CALLE_AL,NUMERO_AL,CP_AL,CIUDAD_AL,PROVINCIA_AL,NUM_HAB_ALOJ,DISPONIBILIDAD,TIPO_ALOJ)VALUES(8,220,400,'26-09-2022','4-10-2022','CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',26,'DISPONIBLE','CASA');
INSERT INTO ALOJAMIENTOS(ID_ALOJ,ID_RESERVA,PRECIO_ALOJ,FECHA_SALIDA_ALOJ,FECHA_ENTRADA_ALOJ,CALLE_AL,NUMERO_AL,CP_AL,CIUDAD_AL,PROVINCIA_AL,NUM_HAB_ALOJ,DISPONIBILIDAD,TIPO_ALOJ)VALUES(9,221,230,'26-09-2022','2-10-2022','CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',31,'DISPONIBLE','PISO');
INSERT INTO ALOJAMIENTOS(ID_ALOJ,ID_RESERVA,PRECIO_ALOJ,FECHA_SALIDA_ALOJ,FECHA_ENTRADA_ALOJ,CALLE_AL,NUMERO_AL,CP_AL,CIUDAD_AL,PROVINCIA_AL,NUM_HAB_ALOJ,DISPONIBILIDAD,TIPO_ALOJ)VALUES(10,222,310,'27-09-2022','3-10-2022','CALLE ALCALA DE NARES',98,36205,'BARCELONA','BARCELONA',42,'DISPONIBLE','HOTEL');

--TABLA PAQUETE

INSERT INTO PAQUETE(ID_PAQ,ID_RESERVA,PRECIO_PAQ,ID_ALOJ,ID_TRAN)VALUES(2,220,500,8,20);
INSERT INTO PAQUETE(ID_PAQ,ID_RESERVA,PRECIO_PAQ,ID_ALOJ,ID_TRAN)VALUES(3,221,500,9,21);
INSERT INTO PAQUETE(ID_PAQ,ID_RESERVA,PRECIO_PAQ,ID_ALOJ,ID_TRAN)VALUES(4,222,500,10,22);
 

--TABLA CLIENTEVIP

INSERT INTO CLIENTE_VIP(DESCUENTO,ID_PERSONA,ID_CLIENTE_VIP)VALUES(30,'53918272M',1);
INSERT INTO CLIENTE_VIP(DESCUENTO,ID_PERSONA,ID_CLIENTE_VIP)VALUES(25,'77254418P',2);

--TABLA PAGO

INSERT INTO PAGO(ID_PAGO,ID_PERSONA,ID_RESERVA,FECHA_CONTRATO,ID_AGE)VALUES(302,'77254418P',220,'27-09-2022',210);
INSERT INTO PAGO(ID_PAGO,ID_PERSONA,ID_RESERVA,FECHA_CONTRATO,ID_AGE)VALUES(303,'18911263L',221,'28-09-2022',211);
INSERT INTO PAGO(ID_PAGO,ID_PERSONA,ID_RESERVA,FECHA_CONTRATO,ID_AGE)VALUES(304,'53918272M',222,'29-09-2022',212);

--TABLA PAGOFRACCIONADO

INSERT INTO PAGO_FRACCIONADO(ID_PAGO,FECHA_PAGO)VALUES(302,'26-09-2022');
INSERT INTO PAGO_FRACCIONADO(ID_PAGO,FECHA_PAGO)VALUES(303,'26-09-2022');
INSERT INTO PAGO_FRACCIONADO(ID_PAGO,FECHA_PAGO)VALUES(304,'26-09-2022');


--TABLA VENDE_ALOJ

INSERT INTO VENDE_ALOJ(ID_ALOJ,ID_PAQ)VALUES(8,2);
INSERT INTO VENDE_ALOJ(ID_ALOJ,ID_PAQ)VALUES(9,3);
INSERT INTO VENDE_ALOJ(ID_ALOJ,ID_PAQ)VALUES(10,4);

--TABLA VENDE_TRAN

INSERT INTO VENDE_TRAN(ID_TRAN,ID_PAQ)VALUES(20,2);
INSERT INTO VENDE_TRAN(ID_TRAN,ID_PAQ)VALUES(21,3);
INSERT INTO VENDE_TRAN(ID_TRAN,ID_PAQ)VALUES(22,4);



--TABLA OFERTA

INSERT INTO OFERTA(ID_PERSONA,ID_PAQ)VALUES('53918272M',2);
INSERT INTO OFERTA(ID_PERSONA,ID_PAQ)VALUES('77254418P',3);
INSERT INTO OFERTA(ID_PERSONA,ID_PAQ)VALUES('18911263L',4);


/*****************************************/
/* 7.- Procedimientos y Funciones PL/SQL */
/*****************************************/

CREATE OR REPLACE FUNCTION ganancias_alojamientos(Ganancias IN OUT NUMBER)
RETURN NUMBER
IS
  Aloj ALOJAMIENTOS.PRECIO_ALOJ%TYPE;
  CURSOR ALOJAMIENTOS_G IS
  SELECT A.PRECIO_ALOJ
  FROM ALOJAMIENTOS A;
BEGIN 
  Ganancias:=0;

  OPEN ALOJAMIENTOS_G;

  LOOP
    FETCH ALOJAMIENTOS_G INTO Aloj;
    EXIT WHEN ALOJAMIENTOS_G%NOTFOUND;
    Ganancias:= Ganancias+Aloj; 
  END LOOP;
       
  CLOSE ALOJAMIENTOS_G;

  RETURN Ganancias;
END ganancias_alojamientos;
/ 
show errors



CREATE OR REPLACE FUNCTION ganancias_transporte(Ganancias IN OUT NUMBER)
RETURN NUMBER
IS
  Trans TRANSPORTE.PRECIO_TRAN%TYPE;
  CURSOR TRANSPORTES_G IS
  SELECT T.PRECIO_TRAN
  FROM TRANSPORTE T;
BEGIN 
  Ganancias:=0;

  OPEN TRANSPORTES_G;

  LOOP
    FETCH TRANSPORTES_G INTO Trans;
    EXIT WHEN TRANSPORTES_G%NOTFOUND;
    Ganancias:= Ganancias+Trans; 
  END LOOP;
       
  CLOSE TRANSPORTES_G;

  RETURN Ganancias;
END ganancias_transporte;
/ 
show errors



CREATE OR REPLACE FUNCTION ganancias_paquete(Ganancias IN OUT NUMBER)
RETURN NUMBER
IS
  Paq PAQUETE.PRECIO_PAQ%TYPE;
  CURSOR PAQUETES_G IS
  SELECT P.PRECIO_PAQ
  FROM PAQUETE P;
BEGIN 
  Ganancias:=0;

  OPEN PAQUETES_G;


 LOOP
    FETCH PAQUETES_G INTO Paq;
    EXIT WHEN PAQUETES_G%NOTFOUND;
    Ganancias:= Ganancias+Paq; 
 END LOOP;
       
  CLOSE PAQUETES_G;

  RETURN Ganancias;
END ganancias_paquete;
/ 
show errors



CREATE OR REPLACE PROCEDURE ListaEmpleados(numEmp OUT NUMBER)
IS 
    regEmp PERSONA%ROWTYPE;
    E_NO_EMPLEADOS EXCEPTION;

    CURSOR C_EMP IS
        SELECT P.NOMBRE_PER,P.CALLE,P.NUMERO,P.CP,P.CIUDAD,P.PROVINCIA,P.EMAIL_PER,P.TELEFONO_PER,P.ID_PERSONA
        FROM PERSONA P, EMPLEADO E
        WHERE EMAIL_PER IS NOT NULL AND P.ID_PERSONA=E.ID_PERSONA;
        

BEGIN
    OPEN C_EMP;
    DBMS_OUTPUT.PUT_LINE('Lista de empleados:');
    LOOP
        FETCH C_EMP INTO regEmp;
        EXIT WHEN C_EMP%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(regEmp.NOMBRE_PER || '(' || regEmp.ID_PERSONA || ')');
    END LOOP;

    numEmp := TO_NUMBER(C_EMP%ROWCOUNT,'99999');
    IF(numEmp = 0) THEN
        RAISE E_NO_EMPLEADOS;
    END IF;
   
    CLOSE C_EMP;

EXCEPTION
    WHEN E_NO_EMPLEADOS THEN
        CLOSE C_EMP;
        DBMS_OUTPUT.PUT_LINE('No hay empleados.');
        RAISE;
    WHEN OTHERS THEN
        CLOSE C_EMP;
        DBMS_OUTPUT.PUT_LINE('Codigo: ' || SQLERRM);
        RAISE;
END ListaEmpleados;
/ 
show errors


CREATE OR REPLACE FUNCTION validar_DNI(id_persona IN VARCHAR2)
RETURN VARCHAR2
	IS
    comprob VARCHAR2(10);
	letrasValidas VARCHAR2(23) := 'TRWAGMYFPDXBNJZSQVHLCKE'; 
    letraCorrecta VARCHAR2(1); 
    letraLeida VARCHAR2(1);
    numeroDNI INTEGER; 
    resto INTEGER; 
BEGIN 
    IF id_persona IS NULL THEN
      RAISE_APPLICATION_ERROR(-20001, 'El DNI suministrado no existe');
    END IF;
    IF length(id_persona)!= 9 THEN
        RAISE_APPLICATION_ERROR(-20002,'El dni suministrado no es de longitud 9');
    END IF;
    letraLeida := SUBSTR (id_persona, 9,1);
    numeroDNI:=SUBSTR(id_persona,1,8);
    resto := numeroDNI MOD 23;
    letraCorrecta := SUBSTR(letrasValidas, resto+1, 1); 
    IF (letraCorrecta = letraLeida) THEN
        comprob:='true';
        RETURN comprob;
    ELSE 
        comprob:='false';
        RETURN comprob;
    END IF;
END validar_DNI; 
/ 
show errors


CREATE OR REPLACE PROCEDURE aumentarSalarioEmpFijo(porcentaje IN NUMBER, cantidadMaxima IN
NUMBER, numEmpleadosModificados OUT NUMBER) 
IS
AUMENTO CONSTANT NUMBER(6,2):= 1+(porcentaje/100);
empleado_fijo EMP_FIJO%ROWTYPE;

CURSOR C_EMP_FIJO IS
	SELECT *
	FROM EMP_FIJO E
	WHERE E.SALARIO_FIJO < cantidadMaxima
	FOR UPDATE;
BEGIN
	IF porcentaje < 0 THEN
		RAISE_APPLICATION_ERROR('-20004','No se puede aplicar un porcentage negativo');
	END IF;
	OPEN C_EMP_FIJO;
	LOOP
		FETCH C_EMP_FIJO INTO empleado_fijo;
		EXIT WHEN C_EMP_FIJO%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE('DNI empleado fijo: ' || empleado_fijo.ID_PERSONA || ' Sueldo antiguo: ' || empleado_fijo.SALARIO_FIJO || ' Nuevo sueldo: ' || empleado_fijo.SALARIO_FIJO * AUMENTO);
        UPDATE EMP_FIJO SET SALARIO_FIJO = SALARIO_FIJO * AUMENTO
        WHERE CURRENT OF C_EMP_FIJO;
	END LOOP;
	numEmpleadosModificados := C_EMP_FIJO%ROWCOUNT;
	CLOSE C_EMP_FIJO;
END aumentarSalarioEmpFijo;
/
show errors


CREATE OR REPLACE PROCEDURE ListaClientesVIP(numClientVIP OUT NUMBER)
IS 
    regClientVIP PERSONA%ROWTYPE;
    E_NO_CLIENTES_VIP EXCEPTION;

    CURSOR C_CLIENT_VIP IS
        SELECT P.NOMBRE_PER,P.CALLE,P.NUMERO,P.CP,P.CIUDAD,P.PROVINCIA,P.EMAIL_PER,P.TELEFONO_PER,P.ID_PERSONA
        FROM PERSONA P, CLIENTE_VIP C
        WHERE EMAIL_PER IS NOT NULL AND P.ID_PERSONA=C.ID_PERSONA;

BEGIN
    OPEN C_CLIENT_VIP;
    DBMS_OUTPUT.PUT_LINE('Lista de clientes VIP:');
    LOOP
        FETCH C_CLIENT_VIP INTO regClientVIP;
        EXIT WHEN C_CLIENT_VIP%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(regClientVIP.NOMBRE_PER || '(' || regClientVIP.ID_PERSONA || ')');
    END LOOP;

    numClientVIP := C_CLIENT_VIP%ROWCOUNT;
    IF(numClientVIP = 0) THEN
        RAISE E_NO_CLIENTES_VIP;
    END IF;

    CLOSE C_CLIENT_VIP;

EXCEPTION
    WHEN E_NO_CLIENTES_VIP THEN
        CLOSE C_CLIENT_VIP;
        DBMS_OUTPUT.PUT_LINE('No hay clientes VIP.');
        RAISE;
    WHEN OTHERS THEN
        CLOSE C_CLIENT_VIP;
        DBMS_OUTPUT.PUT_LINE('Codigo: ' || SQLCODE);
        RAISE;
END ListaClientesVIP;
/
show errors


CREATE OR REPLACE PROCEDURE ListaClientes(numClient OUT NUMBER)
IS 
    regClient PERSONA%ROWTYPE;
    E_NO_CLIENTES EXCEPTION;

    CURSOR C_CLIENT IS
        SELECT P.NOMBRE_PER,P.CALLE,P.NUMERO,P.CP,P.CIUDAD,P.PROVINCIA,P.EMAIL_PER,P.TELEFONO_PER,P.ID_PERSONA
        FROM PERSONA P, CLIENTE C
        WHERE EMAIL_PER IS NOT NULL AND P.ID_PERSONA=C.ID_PERSONA;

BEGIN
    OPEN C_CLIENT;
    DBMS_OUTPUT.PUT_LINE('Lista de clientes:');
    LOOP
        FETCH C_CLIENT INTO regClient;
        EXIT WHEN C_CLIENT%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(regClient.NOMBRE_PER || '(' || regClient.ID_PERSONA || ')');
    END LOOP;

    numClient := TO_NUMBER(C_CLIENT%ROWCOUNT);
    IF(numClient = 0) THEN
        RAISE E_NO_CLIENTES;
    END IF;

    CLOSE C_CLIENT;

EXCEPTION
    WHEN E_NO_CLIENTES THEN
        CLOSE C_CLIENT;
        DBMS_OUTPUT.PUT_LINE('No hay clientes.');
        RAISE;
    WHEN OTHERS THEN
        CLOSE C_CLIENT;
        DBMS_OUTPUT.PUT_LINE('Codigo: ' || SQLCODE);
        RAISE;
END ListaClientes;
/
show errors

/***********************/
/* 8.- TRIGGERS PL/SQL */
/***********************/

CREATE OR REPLACE TRIGGER check_dni
BEFORE INSERT OR UPDATE OF ID_PERSONA ON PERSONA
REFERENCING NEW AS N
FOR EACH ROW
WHEN 
(SUBSTR('TRWAGMYFPDXBNJZSQVHLCKE',MOD(TO_NUMBER(SUBSTR(N.ID_PERSONA,1,8)),23)+1,1)<>SUBSTR(N.ID_PERSONA,9,1))
BEGIN
 RAISE_APPLICATION_ERROR(-20001,'La letra del DNI no es correcta.');
END check_dni;
/
show errors

CREATE OR REPLACE TRIGGER check_numero
BEFORE INSERT OR UPDATE OF NUMERO ON PERSONA
FOR EACH ROW
WHEN ((NEW.NUMERO < 0 OR NEW.NUMERO > 100))
BEGIN
 RAISE_APPLICATION_ERROR(-20002,'El numero no se encuentra en el intervalo permitido.');
END check_numero;
/
show errors

CREATE OR REPLACE TRIGGER check_supervisor
BEFORE INSERT OR UPDATE OF ID_EMPLEADO_SUP ON EMPLEADO
REFERENCING NEW AS N
FOR EACH ROW
WHEN (N.ID_EMPLEADO_SUP IS NOT NULL)
DECLARE
NumSupervisores INT;
BEGIN
SELECT COUNT(*) INTO NumSupervisores FROM EMPLEADO WHERE ID_EMPLEADO_SUP = :N.ID_EMPLEADO_SUP;
IF NumSupervisores = 1 THEN
RAISE_APPLICATION_ERROR(-20003,'Un empleado no puede supervisar a mas de 1 empleado ');
END IF;
END check_supervisor;
/
show errors


CREATE OR REPLACE TRIGGER check_empleado_fijo
BEFORE INSERT ON EMP_FIJO
FOR EACH ROW
DECLARE
cont NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONT
  FROM EMP_TEMPORAL
  WHERE ID_PERSONA = :new.ID_PERSONA;
  IF CONT > 0 THEN
    RAISE_APPLICATION_ERROR (-20004, 'Ya existe un empleado temporal con el mismo identificador.');
  END IF;
END check_empleado_fijo;
/
show errors

CREATE OR REPLACE TRIGGER check_empleado_temporal
BEFORE INSERT ON EMP_TEMPORAL
FOR EACH ROW
DECLARE
cont NUMBER;
BEGIN
  SELECT COUNT(*) INTO CONT
  FROM EMP_FIJO
  WHERE ID_PERSONA = :new.ID_PERSONA;
  
  
  IF CONT > 0 THEN
    RAISE_APPLICATION_ERROR (-20005, 'Ya existe un empleado fijo con el mismo identificador.');
  END IF;
END check_empleado_temporal;
/
show errors

/********************************************************/
/* 9.- Bloque para prueba de Procedimientos y Funciones */
/********************************************************/

SET SERVEROUTPUT ON
DECLARE
    ganancias NUMBER(5);
    prueba NUMBER(4);
    emp NUMBER(8);
    comprob VARCHAR2(20);
BEGIN
    DBMS_OUTPUT.NEW_LINE;
    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO PROCEDIMIENTO: aumentarSalarioEmpFijo');
        aumentarSalarioEmpFijo(18,3200,emp);
        DBMS_OUTPUT.PUT_LINE('El numero de empleados con salario modificado son: ' || emp);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO FUNCION: validar_DNI');
        comprob:=validar_DNI('5381970T');
        
        DBMS_OUTPUT.PUT_LINE('El dni introducido es : ' || comprob);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO PROCEDIMIENTO: ganancias_paquete');
        prueba:=ganancias_paquete(ganancias);
        DBMS_OUTPUT.PUT_LINE('Las ganancias de los paquetes es: ' || ganancias);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO PROCEDIMIENTO: ganancias_alojamientos');
        prueba:=ganancias_alojamientos(ganancias);
        DBMS_OUTPUT.PUT_LINE('Las ganancias de los alojamientos es: ' || ganancias);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO PROCEDIMIENTO: ganancias_transporte');
        prueba:=ganancias_transporte(ganancias);
        DBMS_OUTPUT.PUT_LINE('Las ganancias de los transportes es: ' || ganancias);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;
    
    BEGIN
        DBMS_OUTPUT.PUT_LINE('========> INICIO PROCEDIMIENTO: ListaEmpleados');
        ListaEmpleados(emp);
        DBMS_OUTPUT.PUT_LINE('El numero de empleados es: ' || emp);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('=========>INICIO PROCEDIMIENTO: ListaClientes');
        ListaClientes(emp);
        DBMS_OUTPUT.PUT_LINE('Hay un total de ' || emp || ' clientes');
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    END;
    
    BEGIN
        DBMS_OUTPUT.PUT_LINE('=========>INICIO PROCEDIMIENTO: ListaClientesVIP');
        ListaClientesVIP(emp);
        DBMS_OUTPUT.PUT_LINE('Hay un total de ' || emp || ' clientesVIP');
    EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('EXCEPCION: ');
            DBMS_OUTPUT.PUT_LINE('[Codigo]:'||SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]:'||SQLERRM);
    
    END; 
    
    
END;
/

/***************************************/
/* 10.- Bloque para prueba de Triggers */
/***************************************/
SET SERVEROUTPUT ON
BEGIN
 DBMS_OUTPUT.NEW_LINE;
    BEGIN
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_dni (ANTES)');
    INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('MANUEL', 'MARTINEZ GOMEZ',95,36205,'MADRID','MADRID','MANUEL@GMAIL.COM',676797312,'45366827M'); --45366827V
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_dni (DESPUES)'); 
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
    END;
    
    BEGIN
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_numero (ANTES)');
    INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('LUCAS', 'MARTINEZ ALVAREZ',120,36205,'BARCELONA','BARCELONA','LUCAS2@GMAIL.COM',676797312,'65733892F');
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_numero (DESPUES)');
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
    END;
    
     BEGIN
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_supervisor (ANTES)');
    INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('PABLO', 'GONZALEZ GONZALEZ',96,36205,'TERUEL','TERUEL','PRUEBA23@GMAIL.COM',600227112,'26279619A');
    INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('26279619A',20,'53918272M',210);
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_supervisor (DESPUES)');
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
    END;
    
    BEGIN
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_empleado_fijo (ANTES)');
    INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('MARCOS', 'ZIYECH ALONSO',92,36205,'TERUEL','TERUEL','PABLO123@GMAIL.COM',676227312,'53819770T');
    INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('53819770T',18,'',210);
    INSERT INTO EMP_TEMPORAL(ID_TEMPORAL,SALARIO_TEMPORAL,ID_PERSONA)VALUES(25,800,'53819770T');
    INSERT INTO EMP_FIJO(ID_FIJO,SALARIO_FIJO,ID_PERSONA)VALUES(12,1200,'53819770T') ;
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_empleado_fijo (DESPUES)');
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
    END;
    
    BEGIN
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_empleado_temporal (ANTES)');
    INSERT INTO PERSONA(NOMBRE_PER,CALLE,NUMERO,CP,CIUDAD,PROVINCIA,EMAIL_PER,TELEFONO_PER, ID_PERSONA)VALUES('IVÁN', 'GONZALEZ ALONSO',90,36205,'TERUEL','TERUEL','IVAN123@GMAIL.COM',676227112,'42970882M');
    INSERT INTO EMPLEADO(ID_PERSONA,ID_EMP,ID_EMPLEADO_SUP,ID_AGE)VALUES('42970882M',25,'',210);
    INSERT INTO EMP_FIJO(ID_FIJO,SALARIO_FIJO,ID_PERSONA)VALUES(132,1200,'42970882M') ;
    INSERT INTO EMP_TEMPORAL(ID_TEMPORAL,SALARIO_TEMPORAL,ID_PERSONA)VALUES(25,800,'42970882M');
    DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER check_empleado_temporal (DESPUES)');
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
    END;
    
   
    

END;
/